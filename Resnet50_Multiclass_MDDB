{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11188561,"sourceType":"datasetVersion","datasetId":6984640},{"sourceId":11336133,"sourceType":"datasetVersion","datasetId":7091319}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip list | grep \"torch\\|tensorflow\\|transformers\\|opencv\\|scikit-learn\"","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:35:42.377451Z","iopub.execute_input":"2025-06-01T08:35:42.377792Z","iopub.status.idle":"2025-06-01T08:35:45.934945Z","shell.execute_reply.started":"2025-06-01T08:35:42.377750Z","shell.execute_reply":"2025-06-01T08:35:45.934145Z"}},"outputs":[{"name":"stdout","text":"opencv-contrib-python              4.10.0.84\nopencv-python                      4.10.0.84\nopencv-python-headless             4.10.0.84\npytorch-ignite                     0.5.1\npytorch-lightning                  2.5.0.post0\nscikit-learn                       1.2.2\nscikit-learn-intelex               2025.2.0\nsentence-transformers              3.3.1\ntensorflow                         2.17.1\ntensorflow-cloud                   0.1.5\ntensorflow-datasets                4.9.7\ntensorflow_decision_forests        1.10.0\ntensorflow-hub                     0.16.1\ntensorflow-io                      0.37.1\ntensorflow-io-gcs-filesystem       0.37.1\ntensorflow-metadata                1.13.1\ntensorflow-probability             0.24.0\ntensorflow-text                    2.17.0\ntorch                              2.5.1+cu121\ntorchaudio                         2.5.1+cu121\ntorchinfo                          1.8.0\ntorchmetrics                       1.6.1\ntorchsummary                       1.5.1\ntorchtune                          0.5.0\ntorchvision                        0.20.1+cu121\ntransformers                       4.47.0\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"!rm -rf /kaggle/working/results/checkpoint-*\n!rm -rf /kaggle/working/logs/*\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:35:45.936245Z","iopub.execute_input":"2025-06-01T08:35:45.936543Z","iopub.status.idle":"2025-06-01T08:35:46.167112Z","shell.execute_reply.started":"2025-06-01T08:35:45.936520Z","shell.execute_reply":"2025-06-01T08:35:46.166001Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"!pip install torch torchvision transformers opencv-python scikit-learn","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:35:46.169081Z","iopub.execute_input":"2025-06-01T08:35:46.169342Z","iopub.status.idle":"2025-06-01T08:35:49.977690Z","shell.execute_reply.started":"2025-06-01T08:35:46.169321Z","shell.execute_reply":"2025-06-01T08:35:49.976888Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.5.1+cu121)\nRequirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (0.20.1+cu121)\nRequirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.47.0)\nRequirement already satisfied: opencv-python in /usr/local/lib/python3.10/dist-packages (4.10.0.84)\nRequirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\nRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.17.0)\nRequirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.12.2)\nRequirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.4.2)\nRequirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\nRequirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2024.12.0)\nRequirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.10/dist-packages (from torch) (1.13.1)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy==1.13.1->torch) (1.3.0)\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchvision) (1.26.4)\nRequirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision) (11.0.0)\nRequirement already satisfied: huggingface-hub<1.0,>=0.24.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.29.0)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.2)\nRequirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.2)\nRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.11.6)\nRequirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.32.3)\nRequirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.21.0)\nRequirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.5)\nRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.67.1)\nRequirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (2.4.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (3.0.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2025.1.31)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->torchvision) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->torchvision) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy->torchvision) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy->torchvision) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy->torchvision) (2024.2.0)\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"import os\nimport pandas as pd\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport torch.nn as nn\nimport torch.optim as optim\nimport torchvision.models as models\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:35:49.979482Z","iopub.execute_input":"2025-06-01T08:35:49.979885Z","iopub.status.idle":"2025-06-01T08:36:00.028647Z","shell.execute_reply.started":"2025-06-01T08:35:49.979841Z","shell.execute_reply":"2025-06-01T08:36:00.027949Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# Define the transformations for the images\nimage_transforms = transforms.Compose([\n    transforms.Resize((224, 224)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:36:00.029586Z","iopub.execute_input":"2025-06-01T08:36:00.030102Z","iopub.status.idle":"2025-06-01T08:36:00.035008Z","shell.execute_reply.started":"2025-06-01T08:36:00.030068Z","shell.execute_reply":"2025-06-01T08:36:00.034076Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom transformers import BertTokenizer\nfrom torchvision import transforms\nfrom PIL import Image\nimport os\n\n# Load the CSV file\nurl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vTyh006zrmSWoKAwqF92kZ4lvNRKsZL5NYIkdSEK3wtrWA8yMKLT6K3h1k1nyyHjG9ntZvc9tTcbUif/pub?output=csv'\ndf = pd.read_csv(url,encoding=\"utf-8\")\n\n# Verify column names\nprint(df.columns)\n\n# Drop unnecessary columns if they exist\ncolumns_to_drop = [col for col in ['level', 'Unnamed: 5'] if col in df.columns]\ndf = df.drop(columns_to_drop, axis=1)\n\n# Shuffle the dataframe\ndf = shuffle(df, random_state=42)\n\n# Split the dataset\ntrain_ratio = 0.6\nval_ratio = 0.2\ntest_ratio = 0.2\n\ntrain_data, val_test = train_test_split(df, train_size=train_ratio, random_state=42)\nvalid_data, test_data = train_test_split(val_test, train_size=val_ratio / (val_ratio + test_ratio), random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:36:00.036075Z","iopub.execute_input":"2025-06-01T08:36:00.036407Z","iopub.status.idle":"2025-06-01T08:36:02.874413Z","shell.execute_reply.started":"2025-06-01T08:36:00.036371Z","shell.execute_reply":"2025-06-01T08:36:02.873627Z"}},"outputs":[{"name":"stdout","text":"Index([' id', 'caption', 'label', 'level', 'area', 'Unnamed: 5'], dtype='object')\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"import os\nimport torch\nfrom torch.utils.data import Dataset\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Dataset class\nclass ImageDataset(Dataset):\n    def __init__(self, dataframe, images_folder, image_transforms):\n        # Filter out 'non informative' rows\n        self.dataframe = dataframe[dataframe['label'].str.lower().str.strip() != 'non informative'].reset_index(drop=True)\n        self.images_folder = images_folder\n        self.image_transforms = image_transforms\n\n        self.class_to_index = {\n            'flood': 0,\n            'cyclone': 1,\n            'earthquake': 2,\n            'river erosion': 3,\n            'anthropogenic': 4\n        }\n\n    def __len__(self):\n        return len(self.dataframe)\n\n    def __getitem__(self, idx):\n        row = self.dataframe.iloc[idx]\n        label = row['label']\n        image_id = str(row[' id']).strip()  # Adjust key if needed\n\n        # Convert string label to int\n        if isinstance(label, str):\n            label = self.class_to_index[label.lower().strip()]\n        else:\n            label = int(label)\n\n        # Check file extensions\n        image_path_jpg = os.path.join(self.images_folder, f\"{image_id}.jpg\")\n        image_path_png = os.path.join(self.images_folder, f\"{image_id}.png\")\n        image_path_jpeg = os.path.join(self.images_folder, f\"{image_id}.jpeg\")\n\n        if os.path.exists(image_path_jpg):\n            image_path = image_path_jpg\n        elif os.path.exists(image_path_png):\n            image_path = image_path_png\n        elif os.path.exists(image_path_jpeg):\n            image_path = image_path_jpeg\n        else:\n            raise FileNotFoundError(f\"Image {image_id} not found with .jpg, .png or .jpeg extension\")\n\n        image = Image.open(image_path).convert('RGB')\n        image = self.image_transforms(image)\n\n        assert 0 <= label <= 4, f\"Label {label} out of range\"\n\n        return {\n            'original_label': label,\n            'pixel_values': image,\n            'label': torch.tensor(label, dtype=torch.long)\n        }\n\n# Utility to show image\ndef imshow(image, ax=None, title=None, normalize=False):\n    if ax is None:\n        fig, ax = plt.subplots()\n    image = image.numpy().transpose((1, 2, 0))\n    if normalize:\n        mean = np.array([0.485, 0.456, 0.406])\n        std = np.array([0.229, 0.224, 0.225])\n        image = std * image + mean\n        image = np.clip(image, 0, 1)\n    ax.imshow(image)\n    if title is not None:\n        ax.set_title(title)\n    ax.axis('off')\n    return ax\n\n# Utility to print samples\ndef print_samples(dataloader, num_samples=5):\n    count = 0\n    for batch in dataloader:\n        if count >= num_samples:\n            break\n        for i in range(len(batch['pixel_values'])):\n            if count >= num_samples:\n                break\n            print(f\"Sample {count+1}:\")\n            print(f\"Original Label: {batch['original_label'][i]}\")\n            imshow(batch['pixel_values'][i], normalize=True)\n            plt.show()\n            print()\n            count += 1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:36:02.875224Z","iopub.execute_input":"2025-06-01T08:36:02.875499Z","iopub.status.idle":"2025-06-01T08:36:02.886802Z","shell.execute_reply.started":"2025-06-01T08:36:02.875465Z","shell.execute_reply":"2025-06-01T08:36:02.885942Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# Data augmentation and normalization transforms\ntrain_transforms = transforms.Compose([\n    transforms.RandomResizedCrop(224),\n    transforms.RandomHorizontalFlip(),\n    transforms.RandomRotation(15),\n    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                         std=[0.229, 0.224, 0.225]),\n])\n\nvalid_transforms = transforms.Compose([\n    transforms.Resize(256),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                         std=[0.229, 0.224, 0.225]),\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:36:02.889609Z","iopub.execute_input":"2025-06-01T08:36:02.889942Z","iopub.status.idle":"2025-06-01T08:36:02.923881Z","shell.execute_reply.started":"2025-06-01T08:36:02.889912Z","shell.execute_reply":"2025-06-01T08:36:02.923049Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# Paths\nimages_folder = '/kaggle/input/mddb-images/Photos_Final'\n\n# Dataset and loaders (make sure train_data, valid_data, test_data DataFrames exist)\ntrain_dataset = ImageDataset(train_data, images_folder, train_transforms)\nvalid_dataset = ImageDataset(valid_data, images_folder, valid_transforms)\ntest_dataset = ImageDataset(test_data, images_folder, valid_transforms)\n\ntrain_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, num_workers=4)\nvalid_loader = DataLoader(valid_dataset, batch_size=32, shuffle=False, num_workers=4)\ntest_loader = DataLoader(test_dataset, batch_size=32, shuffle=False, num_workers=4)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:36:02.924966Z","iopub.execute_input":"2025-06-01T08:36:02.925253Z","iopub.status.idle":"2025-06-01T08:36:02.948261Z","shell.execute_reply.started":"2025-06-01T08:36:02.925234Z","shell.execute_reply":"2025-06-01T08:36:02.947573Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# Model setup\nmodel = models.resnet50(pretrained=True)\nnum_features = model.fc.in_features\nmodel.fc = nn.Linear(num_features, 5)  # 5 classes\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\n\noptimizer = optim.AdamW(model.parameters(), lr=2e-5)\ncriterion = nn.CrossEntropyLoss()\n\n# Training function\ndef train_one_epoch(model, data_loader, criterion, optimizer, device):\n    model.train()\n    running_loss = 0.0\n    correct_predictions = 0\n\n    for batch in data_loader:\n        optimizer.zero_grad()\n        inputs = batch['pixel_values'].to(device)\n        labels = batch['label'].to(device)\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item() * inputs.size(0)\n        _, preds = torch.max(outputs, 1)\n        correct_predictions += torch.sum(preds == labels.data)\n\n    epoch_loss = running_loss / len(data_loader.dataset)\n    epoch_acc = correct_predictions.double() / len(data_loader.dataset)\n    return epoch_loss, epoch_acc\n\n# Validation function\ndef validate_one_epoch(model, data_loader, criterion, device):\n    model.eval()\n    running_loss = 0.0\n    correct_predictions = 0\n\n    with torch.no_grad():\n        for batch in data_loader:\n            inputs = batch['pixel_values'].to(device)\n            labels = batch['label'].to(device)\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n\n            running_loss += loss.item() * inputs.size(0)\n            _, preds = torch.max(outputs, 1)\n            correct_predictions += torch.sum(preds == labels.data)\n\n    epoch_loss = running_loss / len(data_loader.dataset)\n    epoch_acc = correct_predictions.double() / len(data_loader.dataset)\n    return epoch_loss, epoch_acc\n\n# Early stopping parameters\nnum_epochs = 10\nbest_acc = 0.0\npatience = 3\ncounter = 0\n\n# Lists to save loss and accuracy for plotting\ntrain_losses = []\nvalid_losses = []\ntrain_accuracies = []\nvalid_accuracies = []\n\n# Training loop\nfor epoch in range(num_epochs):\n    train_loss, train_acc = train_one_epoch(model, train_loader, criterion, optimizer, device)\n    valid_loss, valid_acc = validate_one_epoch(model, valid_loader, criterion, device)\n\n    train_losses.append(train_loss)\n    valid_losses.append(valid_loss)\n    train_accuracies.append(train_acc.item())\n    valid_accuracies.append(valid_acc.item())\n\n    print(f'Epoch {epoch+1}/{num_epochs}')\n    print(f'Train Loss: {train_loss:.4f} | Train Acc: {train_acc:.4f}')\n    print(f'Valid Loss: {valid_loss:.4f} | Valid Acc: {valid_acc:.4f}')\n\n    if valid_acc > best_acc:\n        best_acc = valid_acc\n        torch.save(model.state_dict(), 'best_model.pth')\n        counter = 0\n        print(f'Validation accuracy improved to {best_acc:.4f}. Model saved.')\n    else:\n        counter += 1\n        print(f'No improvement for {counter} epoch(s)')\n\n    if counter >= patience:\n        print(f'Early stopping triggered after {patience} epochs with no improvement.')\n        break\n\nprint('Training complete')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:36:02.948987Z","iopub.execute_input":"2025-06-01T08:36:02.949198Z","iopub.status.idle":"2025-06-01T08:39:39.164895Z","shell.execute_reply.started":"2025-06-01T08:36:02.949181Z","shell.execute_reply":"2025-06-01T08:39:39.163828Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\nDownloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\n100%|██████████| 97.8M/97.8M [00:00<00:00, 212MB/s]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/10\nTrain Loss: 1.4205 | Train Acc: 0.4288\nValid Loss: 1.1611 | Valid Acc: 0.5967\nValidation accuracy improved to 0.5967. Model saved.\nEpoch 2/10\nTrain Loss: 1.1171 | Train Acc: 0.5819\nValid Loss: 0.9228 | Valid Acc: 0.6970\nValidation accuracy improved to 0.6970. Model saved.\nEpoch 3/10\nTrain Loss: 0.9412 | Train Acc: 0.6625\nValid Loss: 0.8089 | Valid Acc: 0.7305\nValidation accuracy improved to 0.7305. Model saved.\nEpoch 4/10\nTrain Loss: 0.8285 | Train Acc: 0.6883\nValid Loss: 0.7469 | Valid Acc: 0.7435\nValidation accuracy improved to 0.7435. Model saved.\nEpoch 5/10\nTrain Loss: 0.7378 | Train Acc: 0.7280\nValid Loss: 0.6798 | Valid Acc: 0.7379\nNo improvement for 1 epoch(s)\nEpoch 6/10\nTrain Loss: 0.6817 | Train Acc: 0.7506\nValid Loss: 0.6577 | Valid Acc: 0.7677\nValidation accuracy improved to 0.7677. Model saved.\nEpoch 7/10\nTrain Loss: 0.6059 | Train Acc: 0.7840\nValid Loss: 0.6431 | Valid Acc: 0.7509\nNo improvement for 1 epoch(s)\nEpoch 8/10\nTrain Loss: 0.5961 | Train Acc: 0.7840\nValid Loss: 0.6536 | Valid Acc: 0.7602\nNo improvement for 2 epoch(s)\nEpoch 9/10\nTrain Loss: 0.5373 | Train Acc: 0.7997\nValid Loss: 0.6457 | Valid Acc: 0.7825\nValidation accuracy improved to 0.7825. Model saved.\nEpoch 10/10\nTrain Loss: 0.5091 | Train Acc: 0.8117\nValid Loss: 0.6586 | Valid Acc: 0.7584\nNo improvement for 1 epoch(s)\nTraining complete\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"# Load best model\nmodel.load_state_dict(torch.load('best_model.pth'))\n\n# Predictions\ndef predict(model, data_loader, device):\n    model.eval()\n    predictions = []\n    with torch.no_grad():\n        for batch in data_loader:\n            inputs = batch['pixel_values'].to(device)\n            outputs = model(inputs)\n            _, preds = torch.max(outputs, 1)\n            predictions.extend(preds.cpu().numpy())\n    return predictions\n\ntest_predictions = predict(model, test_loader, device)\n\n# Evaluation\ndef evaluate_model(model, test_loader, device):\n    model.eval()\n    all_preds = []\n    all_labels = []\n    with torch.no_grad():\n        for batch in test_loader:\n            inputs = batch['pixel_values'].to(device)\n            labels = batch['label'].to(device)\n            outputs = model(inputs)\n            _, preds = torch.max(outputs, 1)\n            all_preds.extend(preds.cpu().numpy())\n            all_labels.extend(labels.cpu().numpy())\n\n    accuracy = accuracy_score(all_labels, all_preds)\n    precision = precision_score(all_labels, all_preds, average='weighted')\n    recall = recall_score(all_labels, all_preds, average='weighted')\n    f1 = f1_score(all_labels, all_preds, average='weighted')\n    report = classification_report(all_labels, all_preds)\n\n    return accuracy, precision, recall, f1, report, all_labels, all_preds\n\naccuracy, precision, recall, f1, report, all_labels, all_preds = evaluate_model(model, test_loader, device)\n\nprint(f\"Accuracy: {accuracy:.4f}\")\nprint(f\"Precision: {precision:.4f}\")\nprint(f\"Recall: {recall:.4f}\")\nprint(f\"F1 Score: {f1:.4f}\")\nprint(\"\\nClassification Report:\")\nprint(report)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:39:39.166059Z","iopub.execute_input":"2025-06-01T08:39:39.166328Z","iopub.status.idle":"2025-06-01T08:39:48.471302Z","shell.execute_reply.started":"2025-06-01T08:39:39.166306Z","shell.execute_reply":"2025-06-01T08:39:48.470154Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-11-a1e3dd88b4ed>:2: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model.load_state_dict(torch.load('best_model.pth'))\n","output_type":"stream"},{"name":"stdout","text":"Accuracy: 0.7402\nPrecision: 0.7373\nRecall: 0.7402\nF1 Score: 0.7381\n\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.76      0.77      0.77       106\n           1       0.66      0.58      0.62       101\n           2       0.68      0.67      0.68        89\n           3       0.77      0.77      0.77        97\n           4       0.79      0.85      0.82       142\n\n    accuracy                           0.74       535\n   macro avg       0.73      0.73      0.73       535\nweighted avg       0.74      0.74      0.74       535\n\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"# Plot training & validation loss and accuracy curves\nepochs = range(1, len(train_losses) + 1)\n\nplt.figure(figsize=(12,5))\nplt.subplot(1, 2, 1)\nplt.plot(epochs, train_losses, 'b-', label='Train Loss')\nplt.plot(epochs, valid_losses, 'r-', label='Valid Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title('Training & Validation Loss')\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs, train_accuracies, 'b-', label='Train Accuracy')\nplt.plot(epochs, valid_accuracies, 'r-', label='Valid Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.title('Training & Validation Accuracy')\nplt.legend()\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T08:39:48.472688Z","iopub.execute_input":"2025-06-01T08:39:48.473107Z","iopub.status.idle":"2025-06-01T08:39:48.951943Z","shell.execute_reply.started":"2025-06-01T08:39:48.473068Z","shell.execute_reply":"2025-06-01T08:39:48.951017Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":12}]}